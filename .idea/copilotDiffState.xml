<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/humancore-api/src/main/java/com/humanconsulting/humancore_api/novo/application/usecases/usuario/BuscarPorIdUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/humancore-api/src/main/java/com/humanconsulting/humancore_api/novo/application/usecases/usuario/BuscarPorIdUseCase.java" />
              <option name="originalContent" value="&#10;&#10;    public BuscarPorIdUseCase(UsuarioRepository usuarioRepository) {&#10;        this.usuarioRepository = usuarioRepository;&#10;    }&#10;&#10;" />
              <option name="updatedContent" value="package com.humanconsulting.humancore_api.novo.application.usecases.usuario;&#13;&#10;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.entities.Usuario;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.repositories.UsuarioRepository;&#13;&#10;import com.humanconsulting.humancore_api.velho.exception.EntidadeNaoEncontradaException;&#13;&#10;import com.humanconsulting.humancore_api.novo.application.usecases.usuario.mappers.UsuarioMapper;&#13;&#10;import com.humanconsulting.humancore_api.novo.application.usecases.usuario.dto.LoginResponseDto;&#13;&#10;&#13;&#10;public class BuscarPorIdUseCase {&#13;&#10;    private final UsuarioRepository usuarioRepository;&#13;&#10;    private final UsuarioMapper usuarioMapper;&#13;&#10;&#13;&#10;    public BuscarPorIdUseCase(UsuarioRepository usuarioRepository, UsuarioMapper usuarioMapper) {&#13;&#10;        this.usuarioRepository = usuarioRepository;&#13;&#10;        this.usuarioMapper = usuarioMapper;&#13;&#10;    }&#13;&#10;&#13;&#10;    public LoginResponseDto execute(Integer id) {&#13;&#10;        Usuario usuario = usuarioRepository.findById(id);&#13;&#10;        if (usuario == null) throw new EntidadeNaoEncontradaException(&quot;Usuário não encontrado.&quot;);&#13;&#10;        return usuarioMapper.toLoginResponse(usuario, null);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/humancore-api/src/main/java/com/humanconsulting/humancore_api/novo/application/usecases/usuario/CadastrarUseCase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/humancore-api/src/main/java/com/humanconsulting/humancore_api/novo/application/usecases/usuario/CadastrarUseCase.java" />
              <option name="originalContent" value="&#10;&#10;    public CadastrarUseCase(&#10;        UsuarioRepository usuarioRepository,&#10;        EmpresaRepository empresaRepository,&#10;        PasswordEncoder passwordEncoder,&#10;        EmailNotifier emailNotifier,&#10;        SalaNotifier salaNotifier&#10;    ) {&#10;        this.usuarioRepository = usuarioRepository;&#10;        this.empresaRepository = empresaRepository;&#10;" />
              <option name="updatedContent" value="package com.humanconsulting.humancore_api.novo.application.usecases.usuario;&#13;&#10;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.entities.Usuario;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.entities.Empresa;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.repositories.UsuarioRepository;&#13;&#10;import com.humanconsulting.humancore_api.novo.domain.repositories.EmpresaRepository;&#13;&#10;import com.humanconsulting.humancore_api.velho.exception.EntidadeConflitanteException;&#13;&#10;&#13;&#10;public class CadastrarUseCase {&#13;&#10;    private final UsuarioRepository usuarioRepository;&#13;&#10;    private final EmpresaRepository empresaRepository;&#13;&#10;    private final PasswordEncoder passwordEncoder;&#13;&#10;    private final EmailNotifier emailNotifier;&#13;&#10;    private final SalaNotifier salaNotifier;&#13;&#10;&#13;&#10;    public CadastrarUseCase(&#13;&#10;        UsuarioRepository usuarioRepository,&#13;&#10;        EmpresaRepository empresaRepository,&#13;&#10;        PasswordEncoder passwordEncoder,&#13;&#10;        EmailNotifier emailNotifier,&#13;&#10;        SalaNotifier salaNotifier&#13;&#10;    ) {&#13;&#10;        this.usuarioRepository = usuarioRepository;&#13;&#10;        this.empresaRepository = empresaRepository;&#13;&#10;        this.passwordEncoder = passwordEncoder;&#13;&#10;        this.emailNotifier = emailNotifier;&#13;&#10;        this.salaNotifier = salaNotifier;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Usuario execute(Usuario novoUsuario, Integer fkEmpresa) {&#13;&#10;        if (usuarioRepository.findByEmail(novoUsuario.getEmail()) == null) {&#13;&#10;            novoUsuario.setCores(&quot;#606080|#8d7dca|#4e5e8c|true&quot;);&#13;&#10;            Empresa empresa = empresaRepository.findById(fkEmpresa);&#13;&#10;            novoUsuario.setEmpresa(empresa);&#13;&#10;            String senhaCriptografada = passwordEncoder.encode(novoUsuario.getSenha());&#13;&#10;            try {&#13;&#10;                emailNotifier.cadastro(novoUsuario);&#13;&#10;            } catch (Exception exception) {&#13;&#10;                throw new RuntimeException(&quot;Não foi possível cadastrar o usuário.&quot;);&#13;&#10;            }&#13;&#10;            novoUsuario.setSenha(senhaCriptografada);&#13;&#10;            Usuario usuarioCadastrado = usuarioRepository.save(novoUsuario);&#13;&#10;            salaNotifier.adicionarUsuarioEmSalaEmpresa(usuarioCadastrado);&#13;&#10;            return usuarioCadastrado;&#13;&#10;        }&#13;&#10;        throw new EntidadeConflitanteException(&quot;Este email já foi registrado&quot;);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>